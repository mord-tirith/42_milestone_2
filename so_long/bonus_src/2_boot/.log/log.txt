=== start of ./boot.c ===

#include "bonus_boot_lib.h"

static void	find_exit(t_map *map)
{
	int		y;
	int		x;
	char	**arr;

	arr = map->layout;
	y = 1;
	while (arr[y])
	{
		x = 1;
		while (arr[y][x])
		{
			if (arr[y][x] == 'E')
			{
				map->e_x = x;
				map->e_y = y;
				return ;
			}
			x++;
		}
		y++;
	}
}

static void	count_coins(int *coins, char **map)
{
	int	y;
	int	x;

	y = 1;
	while (map[y])
	{
		x = 1;
		while (map[y][x])
		{
			if (map[y][x] == 'C')
				*coins += 1;
			x++;
		}
		y++;
	}
}

static void	boot_t_game(t_game *game)
{
	game->error_bitmask = 0;
	game->move_count = 0;
	game->map_render = 1;
	game->p_x = 0;
	game->p_y = 0;
	game->coins = 0;
	game->mlx = NULL;
	game->win = NULL;
	game->map = ft_calloc(1, sizeof(t_map));
	game->assets = ft_calloc(1, sizeof(t_assets));
	game->player = ft_calloc(1, sizeof(t_player));
	if (!game->map || !game->assets || !game->player)
		game->error_bitmask |= MALLOCS_ER;
}

void	ft_boot_game(t_game *game, char *file)
{
	boot_t_game(game);
	if (game->error_bitmask)
		return ;
	game->assets->map_file = file;
	ft_boot_map(game);
	if (game->error_bitmask)
		return ;
	count_coins(&game->coins, game->map->layout);
	find_exit(game->map);
	ft_boot_player(game);
}
=== end of ./boot.c ===
=== start of ./detail_map.c ===

#include "bonus_boot_lib.h"

int	ft_is_wall(t_map map, int y, int x)
{
	char	c;
	int		s_x;
	int		s_y;

	s_x = map.x;
	s_y = map.y;
	if (x < 0 || x >= s_x || y < 0 || y >= s_y)
		return (1);
	c = map.layout[y][x];
	return (c == '1');
}

static char latter_walls(int mask_dir, int mask_dig)
{
	if (mask_dir == 10)
		return ('Q');
	if (mask_dir == 11)
		return ("RSTU"[BITMASK_B[mask_dig] - '0']);
	if (mask_dir == 12)
		return ("VW"[BITMASK_C[mask_dig] - '0']);
	if (mask_dir == 13)
		return ("XYZ%"[BITMASK_D[mask_dig] - '0']);
	if (mask_dir == 14)
		return ("!@#$"[BITMASK_E[mask_dig] - '0']);
	if (mask_dir == 15)
		return (BITMASK_F[mask_dig]);
	return ('*');
}

static char	give_wall(int mask_dir, int mask_dig)
{
	if (mask_dir == 0)
		return ('A');
	if (mask_dir == 1)
		return ('B');
	if (mask_dir == 2)
		return ('C');
	if (mask_dir == 3)
		return ("DE"[BITMASK_3[mask_dig] - '0']);
	if (mask_dir == 4)
		return ('F');
	if (mask_dir == 5)
		return ('G');
	if (mask_dir == 6)
		return ("HI"[BITMASK_6[mask_dig] - '0']);
	if (mask_dir == 7)
		return ("JKLM"[BITMASK_7[mask_dig] - '0']);
	if (mask_dir == 8)
		return ('N');
	if (mask_dir == 9)
		return ("OP"[BITMASK_9[mask_dig] - '0']);
	return (latter_walls(mask_dir, mask_dig));
}

char	ft_prep_wall(t_map map, int y, int x)
{
	int	wasd_mask;
	int	diag_mask;

	wasd_mask = 0;
	wasd_mask |= ft_is_wall(map, y - 1, x + 0) << 3;
	wasd_mask |= ft_is_wall(map, y + 0, x - 1) << 2;
	wasd_mask |= ft_is_wall(map, y + 1, x + 0) << 1;
	wasd_mask |= ft_is_wall(map, y + 0, x + 1) << 0;
	diag_mask = 0;
	diag_mask |= ft_is_wall(map, y - 1, x - 1) << 3;
	diag_mask |= ft_is_wall(map, y - 1, x + 1) << 2;
	diag_mask |= ft_is_wall(map, y + 1, x - 1) << 1;
	diag_mask |= ft_is_wall(map, y + 1, x + 1) << 0;
	return (give_wall(wasd_mask, diag_mask));
}
=== end of ./detail_map.c ===
=== start of ./map_boot.c ===

#include "bonus_boot_lib.h"
#include <fcntl.h>
#include <unistd.h>

static int	row_count(char *file)
{
	int		fd;
	int		rows;
	char	buffer;

	fd = open(file, O_RDONLY);
	if (fd < 0)
		return (-1);
	rows = 1;
	while (read(fd, &buffer, 1) > 0)
	{
		if (buffer == '\n')
			rows++;
	}
	close(fd);
	return (rows);
}

static char	**copy_map(int fd, char **map, int size)
{
	int		i;
	char	*temp;

	temp = get_next_line(fd);
	i = 0;
	while (i < size && temp)
	{
		map[i] = ft_strtrim(temp, "\n");
		if (!map[i])
		{
			close(fd);
			return (ft_clean_arr(map));
		}
		free(temp);
		temp = get_next_line(fd);
		i++;
	}
	close(fd);
	return (map);
}

static char **load_map(char *file)
{
	int		fd;
	int		size;
	char	**map;

	size = row_count(file);
	if (size < 0)
		return (NULL);
	map = ft_calloc(size, sizeof(char *));
	fd = open(file, O_RDONLY);
	if (fd < 0)
		return (ft_clean_arr(map));
	return (copy_map(fd, map, size));
}

static void	get_p_yx(t_game *game)
{
	int		i;
	char	*chr;
	char	**map;

	map = game->map->layout;
	i = 1;
	while (map[i])
	{
		chr = ft_strchr(map[i], 'P');
		if (chr)
		{
			game->p_y = i;
			game->p_x = chr - map[i];
			return ;
		}
		i++;
	}
}

void	ft_boot_map(t_game *game)
{
	int	i;

	game->map->layout = load_map(game->assets->map_file);
	if (!game->map->layout)
		game->error_bitmask |= MALLOCS_ER;
	game->map->x = ft_strlen(game->map->layout[0]);
	i = 0;
	while (game->map->layout[i])
		i++;
	game->map->y = i;
	ft_detail_map(game->map);
	if (!game->map->arr)
		game->error_bitmask |= MALLOCS_ER;
	get_p_yx(game);
}
=== end of ./map_boot.c ===
=== start of ./player_boot.c ===

#include "bonus_boot_lib.h"

void	ft_boot_player(t_game *game)
{
	t_player	*p;

	p = game->player;
	p->x = game->p_x;
	p->y = game->p_y;
	p->dir = 2;
	p->pla_render = 1;
}
=== end of ./player_boot.c ===
=== start of ./reboot_map.c ===

#include "bonus_boot_lib.h"
#include <stdlib.h>

static void	clone_arr(t_map *map)
{
	int	i;
	int	**new_arr;

	new_arr = ft_calloc(map->y, sizeof(int *));
	if (!new_arr)
		return ;
	i = 0;
	while (i < map->y)
	{
		new_arr[i] = ft_calloc(map->x, sizeof(int));
		if (!new_arr[i])
		{
			ft_clean_int_arr(new_arr, i);
			return ;
		}
		i++;
	}
	map->arr = new_arr;
}

static int	translate_symbol(char c)
{
	int	i;

	i = 0;
	while (MAP_ASSETS[i])
	{
		if (MAP_ASSETS[i] == c)
			return (i);
		i++;
	}
	return (ASSET_ERROR);
}

void	ft_detail_map(t_map *map)
{
	int		x;
	int		y;
	char	c;

	clone_arr(map);
	if (!map->arr)
		return ;
	y = 0;
	while (y < map->y)
	{
		x = 0;
		while (x < map->x)
		{
			if (ft_is_wall(*map, y, x))
				c = ft_prep_wall(*map, y, x);
			else
				c = 'z';
			map->arr[y][x] = translate_symbol(c);
			x++;
		}
		y++;
	}
}
=== end of ./reboot_map.c ===
=== start of ./swiper.c ===

#include "bonus_boot_lib.h"
#include <stdlib.h>

void	ft_clean_int_arr(int **arr, int i)
{
	int	j;

	j = 0;
	while (j < i)
	{
		free(arr[j]);
		j++;
	}
	free(arr);
}

char	**ft_clean_arr(char **arr)
{
	int	i;

	if (!arr || !*arr)
		return (NULL);
	i = 0;
	while (arr[i])
	{
		free(arr[i]);
		i++;
	}
	free(arr);
	return (NULL);
}

static void	deload_assets(t_assets *assets, void *mlx)
{
	int	i;

	if (!assets || !mlx)
		return ;
	i = -1;
	while (MAP_ASSETS[++i])
		mlx_destroy_image(mlx, assets->a_map[i]);
	mlx_destroy_image(mlx, assets->a_err);
}

void	ft_clean_game(t_game *game)
{
	if (game->map)
	{
		if (game->map->arr)
			ft_clean_int_arr(game->map->arr, game->map->y);
		if (game->map->layout)
			ft_clean_arr(game->map->layout);
		free(game->map);
	}
	if (game->assets)
	{
		deload_assets(game->assets, game->mlx);
		free(game->assets);
	}
	if (game->win)
		mlx_destroy_window(game->mlx, game->win);
	if (game->mlx)
	{
		mlx_destroy_display(game->mlx);
		free(game->mlx);
	}
}
=== end of ./swiper.c ===
