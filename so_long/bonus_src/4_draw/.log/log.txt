=== start of ./background.c ===

#include "bonus_draw_lib.h"

static void	blit_bg(t_img *dst, t_img *src, int x_off, int y_off)
{
	int				x;
	int				y;
	unsigned int	*src_pixel;
	unsigned int	*dst_pixel;

	y = 0;
	while (y < src->h)
	{
		x = 0;
		while (x < src->w)
		{
			src_pixel = src->data + (y * src->ppl + x);
			dst_pixel = dst->data + ((y + y_off) * dst->ppl + (x + x_off));
			*dst_pixel = *src_pixel;
			x++;
		}
		y++;
	}
}

void	ft_prepare_frame(t_game *game)
{
	int	w;
	int	h;

	h = 0;
	w = 0;
	while (game->map->layout[h])
		h++;
	while (game->map->layout[0][w])
		w++;
	h *= TILE_SIZE;
	w *= TILE_SIZE;
	game->frame = ft_calloc(sizeof(t_img), 1);
	game->frame->img = mlx_new_image(game->mlx, w, h);
	if (!game->frame->img)
	{
		game->error_bitmask |= MLXLOAD_ER;
		return ;
	}
	game->frame->data = (unsigned int *)mlx_get_data_addr(game->frame->img, 
		&game->frame->bpp, &game->frame->line, &game->frame->endian);
	game->frame->h = h;
	game->frame->w = w;
	game->frame->ppl = game->frame->line / 4;
}

void	ft_draw_bg(t_game *game)
{
	int		y;
	int		x;
	int		i;
	t_img	*t;

	y = 0;
	while (game->map->layout[y])
	{
		x = 0;
		while (game->map->layout[y][x])
		{
			i = game->map->arr[y][x];
			t = &game->assets->a_map[i];
			blit_bg(game->frame, t, x * TILE_SIZE, y * TILE_SIZE);
			x++;
		}
		y++;
	}
}
=== end of ./background.c ===
=== start of ./looper.c ===

#include "bonus_draw_lib.h"
#include <stdio.h>
#include <sys/time.h>

static long	get_time_us(void)
{
	struct timeval v;
	
	gettimeofday(&v, NULL);
	return ((v.tv_sec * 1000000) + v.tv_usec);
}


int	ft_draw_loop(void *g)
{
	long		time;
	t_game		*game;
	static int	frames[3] = {83333, 62500, 50000};
	static long	last_time;

	
	game = (t_game *)g;
	time = get_time_us();
	if (time - last_time < frames[game->player->state])
		return (0);
	ft_draw_bg(game);
	ft_player_draw(game);
	mlx_put_image_to_window(game->mlx, game->win, game->frame->img, 0, 0);
	last_time = time;
	return (0);
}
=== end of ./looper.c ===
=== start of ./foreground.c ===

#include "bonus_draw_lib.h"
#include "so_long_bonus.h"

static void	move_player(t_player *p)
{
	if (p->state != 1)
		return ;
	if (p->x < p->tile_x * TILE_SIZE)
		p->x += MOVE_SPEED;
	else if (p->x > p->tile_x * TILE_SIZE)
		p->x -= MOVE_SPEED;
	if (p->y < p->tile_y * TILE_SIZE)
		p->y += MOVE_SPEED;
	else if (p->y > p->tile_y * TILE_SIZE)
		p->y -= MOVE_SPEED;
	if (p->x == p->tile_x * TILE_SIZE &&
	 p->y == p->tile_y * TILE_SIZE)
		p->state = 0;
}

static int	vars_to_i(t_player *p)
{
	int			i;
	static int	offset[] = {0, 24, 56};
	static int	count[] = {6, 8, 10};

	i = offset[p->state];
	i += count[p->state] * p->dir;
	i += p->curr;
	p->curr += 1;
	if (p->curr == count[p->state])
		p->curr = 0;
	return (i);
}

static void	blit_player(t_img *dst, t_img *src, int x_off, int y_off)
{
	int				x;
	int				y;
	unsigned int	*src_pixel;
	unsigned int	*dst_pixel;

	y = 0;
	while (y < src->h)
	{
		x = 0;
		while (x < src->w)
		{
			src_pixel = src->data + (y * src->ppl + x);
			dst_pixel = dst->data + ((y + y_off) * dst->ppl + (x + x_off));
			if (*src_pixel != 0xFF000000)
				*dst_pixel = *src_pixel;
			x++;
		}
		y++;
	}
}

void	ft_player_draw(t_game *game)
{
	int		i;
	t_img	*sprite;

	i = vars_to_i(game->player);
	sprite = &game->assets->a_pla[i];
	if (game->player->state == 1)
		move_player(game->player);
	blit_player(game->frame, sprite, game->player->x, game->player->y);
}
=== end of ./foreground.c ===
