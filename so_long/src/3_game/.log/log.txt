=== start of draw_map.c ===
#include "so_long.h"

void	ft_draw_map(t_game *game)
{
	int		x;
	int		y;
	char	tile;
	void	*img;

	y = 0;
	while (y < game->map.y)
	{
		x = 0;
		while (x < game->map.x)
		{
			tile = game->map.arr[y][x];
			img = game->assets.a_map[(int)tile];
			if (img)
				mlx_put_image_to_window(game->mlx, game->win, img,
				x * TILE_SIZE, y * TILE_SIZE);
			x++;
		}
		y++;
	}
}

=== end of draw_map.c ===
=== start of input_control.c ===

#include "so_long.h"

static void	move_player(t_game *game, int x, int y)
{
	char	target;

	target = game->map.layout[game->p_y + y][game->p_x + x];
	if (target == '1')
		return ;
	if (target == 'E')
	{
		if (game->coins == 0)
			return ; // <- TODO game won function here
		return ;
	}
	if (target == 'C')
	{
		game->coins -= 1;
		game->map.layout[game->p_y + y][game->p_x + x] = '0';
	}
	game->p_x += x;
	game->p_y += y;
	game->move_count += 1;
}

int	ft_keys_hook(int key, t_game *game)
{
	if (key == KEY_ESC)
		ft_exit_game(game);
	else if (key == KEY_W || key == KEY_UP)
		move_player(game, 0, -1);
	else if (key == KEY_A || key == KEY_LEFT)
		move_player(game, -1, 0);
	else if (key == KEY_S || key == KEY_DOWN)
		move_player(game, 0, 1);
	else if (key == KEY_D || key == KEY_RIGHT)
		move_player(game, 1, 0);
	return (0);
}


=== end of input_control.c ===
=== start of so_long.c ===

#include "so_long.h"

int	main(int ac, char **av)
{
	t_game	game;

	if (ac != 2)
		return (1);
	game.assets.map_file = av[1];
	ft_valid_map(&game);
	if (game.error_bitmask)
		ft_resolve_error(game.error_bitmask);
	ft_boot_map(&game);
	ft_boot_mlx(&game);
	ft_boot_assets(&game);
}
=== end of so_long.c ===
=== start of so_long.h ===

#ifndef SO_LONG_H
# define SO_LONG_H

/* Global Includes: */
# include "../../.libft/inc/libftpp.h"
# include "../../minilibx-linux/mlx.h"

/* Types: */

typedef struct s_map
{
	int		x;
	int		y;
	char	**arr;
	char	**layout;
}	t_map;

typedef struct s_assets
{
	char	*map_file;
	void	*a_map[128];
}	t_assets;

typedef struct s_game
{
	int			error_bitmask;
	int			move_count;
	int			p_x;
	int			p_y;
	int			coins;
	void		*mlx;
	void		*win;
	t_map		map;
	t_assets	assets;
}	t_game;

typedef enum e_flags
{	
	SUCCESSFUL = 0,
	MALLOCS_ER = 1 << 0,
	BERFILE_ER = 1 << 1,
	MAPFILE_ER = 1 << 2,
	X_VALUE_ER = 1 << 3,
	PLAYERS_ER = 1 << 4,
	EXITPLU_ER = 1 << 5,
	OPENWAL_ER = 1 << 6,
	NOCOINS_ER = 1 << 7,
	LOCKOIN_ER = 1 << 8,
	LOCKEXI_ER = 1 << 9,
	WRONGAC_ER = 1 << 10,
	MLXLOAD_ER = 1 << 11
}	t_flags;

/* System Dependant Macros: */
# ifdef __linux__
#  define KEY_ESC	65307
#  define KEY_W		119
#  define KEY_A		97
#  define KEY_S		115
#  define KEY_D		100
#  define KEY_UP	65362
#  define KEY_LEFT	65361
#  define KEY_DOWN	65364
#  define KEY_RIGHT	65363
#  define LIN_FLAG	1

# elif __APPLE__
#  define KEY_ESC	53
#  define KEY_W		13
#  define KEY_A		0
#  define KEY_S		1
#  define KEY_D		2
#  define KEY_UP	126 
#  define KEY_LEFT	123 
#  define KEY_DOWN	125
#  define KEY_RIGHT	124 
#  define LIN_FLAG	0
# endif

/* Macros: */
# define TILE_SIZE 48
# define MAP_ASSETS "!%@$aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPQRSTUvVwWxXyYzZ#"

/* Functions: */
// Pre-game functions:
void	ft_valid_map(t_game *game);

// Boot functions:
void	ft_boot_map(t_game *game);
void	ft_boot_mlx(t_game *game);
void	ft_boot_assets(t_game *game);
void	ft_detail_map(t_map *map);

// Exit functions:
void	ft_exit_game(t_game *game);

// Error management:
void	ft_resolve_error(int mask);

// Draw functions:
void	ft_draw_map(t_game *game);
#endif
=== end of so_long.h ===
