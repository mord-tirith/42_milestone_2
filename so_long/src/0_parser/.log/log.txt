=== start of flood_fill.c ===

#include "so_long.h"
#include "parse_lib.h"
#include <stdlib.h>

static void	coin_flood(int y, int x, t_validators *v)
{
	if (x < 0 || y < 0 || x >= v->x || y >= v->y || v->coin_map[y][x] == '1' ||
	v->coin_map[y][x] == 'F' || v->coin_map[y][x] == 'E')
		return ;
	if (v->coin_map[y][x] == 'C')
		v->coins -= 1;
	v->coin_map[y][x] = 'F';
	coin_flood(y - 1, x, v);
	coin_flood(y, x - 1, v);
	coin_flood(y + 1, x, v);
	coin_flood(y, x + 1, v);
}

static int	exit_flood(int y, int x, t_validators *v)
{

	if (x < 0 || y < 0 || x >= v->x || y >= v->y
		|| v->exit_map[y][x] == '1' || v->exit_map[y][x] == 'F')
		return (0);
	if (v->exit_map[y][x] == 'E')
		return (1);
	v->exit_map[y][x] = 'F';
	return (exit_flood(y - 1, x, v) ||
	exit_flood(y, x + 1, v) ||
	exit_flood(y + 1, x, v) ||
	exit_flood(y, x - 1, v));
}

static char	**bad_arr(t_validators *v)
{
	if (v->coin_map)
	{
		while (*(v->coin_map))
		{
			free(*(v->coin_map));
			v->coin_map += 1;
		}
		free(v->coin_map);
	}
	if (v->exit_map)
	{
		while (*(v->exit_map))
		{
			free(*(v->exit_map));
			v->exit_map += 1;
		}
		free(v->exit_map);
	}
	v->error_mask |= MALLOCS_ER;
	return (NULL);
}

static char	**clone_arr(t_validators *v)
{
	int		i;
	char	**new_arr;

	new_arr = ft_calloc(v->y + 1, sizeof(char *));
	if (!new_arr)
		return (bad_arr(v));
	i = 0;
	while (v->arr[i])
	{
		new_arr[i] = ft_strdup(v->arr[i]);
		if (!new_arr[i])
			return (bad_arr(v));
		i++;
	}
	return (new_arr);
}

void	ft_flood_map(t_validators *v)
{
	v->coin_map = NULL;
	v->exit_map = NULL;
	v->coin_map = clone_arr(v);
	v->exit_map = clone_arr(v);
	if (!v->coin_map || !v->exit_map)
	{
		bad_arr(v);
		return ;
	}
	if (v->coin_map)
		coin_flood(v->p_y, v->p_x, v);
	if (v->exit_map)
		v->exit = exit_flood(v->p_y, v->p_x, v);
	if (v->coins)
		v->error_mask |= LOCKOIN_ER;
	if (!v->exit)
		v->error_mask |= LOCKEXI_ER;
}
=== end of flood_fill.c ===
=== start of load_map.c ===

#include "parse_lib.h"
#include "so_long.h"
#include <stddef.h>
#include <stdio.h>
#include <fcntl.h>

static int	map_height(char *file)
{
	int		map_size;
	int		fd;
	char	buffer;

	map_size = -1;
	fd = open(file, O_RDONLY);
	if (fd >= 0)
	{
		map_size = 0;
		while (read(fd, &buffer, 1) > 0)
		{
			if (buffer == '\n')
				map_size++;
		}
		close(fd);
	}
	return (map_size);
}

static char **snip_slash_ns(char **map)
{
	int	y;
	int	x;

	if (!map)
		return (NULL);
	y = 0;
	while (map[y])
	{
		x = 0;
		while (map[y][x])
		{
			if (map[y][x] == '\n')
				map[y][x] = '\0';
			x++;
		}
		y++;
	}
	return (map);
}

static char **load_map(char *file)
{
	int		fd;
	int		i;
	char	*temp;
	char	**map;

	i = map_height(file);
	if (i < 0)
		return (NULL);
	fd = open(file, O_RDONLY);
	if (fd >= 0)
	{
		map = ft_calloc(i + 1, sizeof(char *));
		if (!map)
			return (NULL);
		i = 0;
		temp = get_next_line(fd);
		while (temp)
		{
			map[i] = temp;
			temp = get_next_line(fd);
			i++;
		}
	}
	return (snip_slash_ns(map));
}

static int	is_ber(char *file)
{
	size_t	size;

	size = ft_strlen(file);
	if (size >= 4)
	{
		if (!ft_strncmp(file + (size - 4), ".ber", 4))
			return (1);
	}
	return (0);
}

void	ft_file_check(t_game *game)
{
	int	fd;

	fd = open(game->assets.map_file, O_RDONLY);
	if (fd >= 0)
	{
		close(fd);
		if (!is_ber(game->assets.map_file))
			game->error_bitmask |= BERFILE_ER;
		game->map.layout = load_map(game->assets.map_file);
		if (game->map.layout)
			return ;
	}
	game->error_bitmask |= MAPFILE_ER;
}

=== end of load_map.c ===
=== start of maparse.c ===

#include "so_long.h"
#include "parse_lib.h"
#include <stddef.h>
#include <stdlib.h>

static t_validators	*boot_validators(t_game *game)
{
	t_validators	*v;

	v = malloc(sizeof(t_validators));
	if (!v)
		return (NULL);
	v->error_mask = 0;
	v->coins = 0;
	v->exit = 0;
	v->player = 0;
	v->x = 0;
	v->y = 0;
	v->flood = 0;
	v->arr = game->map.layout;
	return (v);
}

void	ft_valid_map(t_game *game)
{
	t_validators	*v;

	ft_file_check(game);
	if (game->error_bitmask)
		return ;
	v = boot_validators(game);
	if (v)
	{
	ft_uniques(v);
	ft_check_ones(v);
	ft_flood_map(v);
	game->error_bitmask |= v->error_mask;
	}
	else
		game->error_bitmask |= MALLOCS_ER;
}
=== end of maparse.c ===
=== start of ones_check.c ===

#include "so_long.h"
#include "parse_lib.h"

static int	top_and_bottom(t_validators *v)
{
	int	i;
	int	y;

	i = 0;
	y = v->y - 1;
	while (v->arr[0][i])
	{
		if (v->arr[0][i] != '1')
			return (0);
		i++;
	}
	i = 0;
	while (v->arr[y][i])
	{
		if (v->arr[y][i] != '1')
			return (0);
		i++;
	}
	return (1);
}

static int	sides(t_validators *v)
{
	int	i;
	int	x;

	i = 1;
	while (i < v->y)
	{
		x = ft_strlen(v->arr[i]);
		if (v->arr[i][0] != '1' || v->arr[i][x - 1] != '1')
			return (0);
		i++;
	}
	return (1);
}

void	ft_check_ones(t_validators *v)
{
	int	passed;

	passed = 1;
	if (!top_and_bottom(v) || !sides(v))
		passed = 0;
	if (!passed)
		v->error_mask |= OPENWAL_ER;
}
=== end of ones_check.c ===
=== start of unique_symbols.c ===

#include "parse_lib.h"

static void	valid_e(t_validators *v)
{
	int	x;
	int	y;

	y = 0;
	while (v->arr[y])
	{
		x = 0;
		while (v->arr[y][x])
		{
			if (v->arr[y][x] == 'E' && !v->exit)
				v->exit = 1;
			else if (v->arr[y][x] == 'E')
				v->error_mask |= EXITPLU_ER;
			x++;
		}
		y++;
	}
	v->y = y;
}

static void	valid_p(t_validators *v)
{
	int	x;
	int	y;

	y = 0;
	while (v->arr[y])
	{
		x = 0;
		while (v->arr[y][x])
		{
			if (v->arr[y][x] == 'P' && !v->player)
			{
				v->player = 1;
				v->p_x = x;
				v->p_y = y;
			}
			else if (v->arr[y][x] == 'P')
				v->error_mask |= PLAYERS_ER;
			x++;
		}
		y++;
	}
}

static void	valid_c(t_validators *v)
{
	int	y;
	int	x;

	y = 0;
	while (v->arr[y])
	{
		x = 0;
		while (v->arr[y][x])
		{
			if (v->arr[y][x] == 'C')
				v->coins++;
			x++;
		}
		y++;
	}
	if (!v->coins)
		v->error_mask |= NOCOINS_ER;
}

static int	valid_x(t_validators *v)
{
	int		i;

	i = 0;
	v->x = ft_strlen(v->arr[0]);
	while (v->arr[i])
	{
		if ((int)ft_strlen(v->arr[i]) != v->x)
		{
			v->error_mask |= X_VALUE_ER;
			return (0);
		}
		i++;
	}
	return (1);
}

void	ft_uniques(t_validators *v)
{
	valid_x(v);
	valid_p(v);
	valid_e(v);
	valid_c(v);
}
=== end of unique_symbols.c ===
