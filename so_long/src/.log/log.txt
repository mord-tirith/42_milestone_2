=== start of main.c ===

#include "so_long.h"
#include <X11/keysym.h>

int	safe_close (t_data *data)
{
	int	i;

	i = 0;
	while (i < IDLE_FRAMES)
	{
		if (data->idle[i].image)
			mlx_destroy_image(data->mlx, data->idle[i].image);
		i++;
	}
	if (data->win)
		mlx_destroy_window(data->mlx, data->win);
	#ifdef __linux__
	if (data->mlx)
	{
		mlx_destroy_display(data->mlx);
		free(data->mlx);
	}
	#endif
	return (0);
}

int	handle_key(int key, t_data *data)
{
	if (key == XK_Escape)
		safe_close(data);
	return (0);
}

int	animate_loop(t_data *data)
{
	static int	delay;

	if (++delay >= 1000)
	{
		delay = 0;
		data->frame = (data->frame + 1) % IDLE_FRAMES;
	}

	mlx_clear_window(data->mlx, data->win);
	mlx_put_image_to_window(data->mlx, data->win, data->idle[data->frame].image, 400, 300);
	return (0);
}

int	main(void)
{
	t_data	data;
	int		img_height;
	int		img_width;
	int		i;
	char	*path[IDLE_FRAMES] = {
		"assets/player/idle/front00.xpm",
		"assets/player/idle/front01.xpm",
		"assets/player/idle/front02.xpm",
		"assets/player/idle/front03.xpm",
		"assets/player/idle/front04.xpm",
		"assets/player/idle/front05.xpm"
	};

	i = 0;
	data.frame = 0;
	data.mlx = mlx_init();
	if (!data.mlx)
		return (1);
	data.win = mlx_new_window(data.mlx, 800, 600, "Idle Test");
	if (!data.win)
		return (safe_close(&data));
	
	while (i < 6)
	{
		data.idle[i].image = mlx_xpm_file_to_image(data.mlx, path[i], &img_height, &img_width);
		i++;
		if (!data.idle[i].image)
			return (safe_close(&data));
	}
	mlx_hook(data.win, 17, 0, safe_close, &data);
	mlx_key_hook(data.win, handle_key, &data);
	mlx_loop_hook(data.mlx, animate_loop, &data);
	mlx_loop(data.mlx);
	return (0);
}
=== end of main.c ===
=== start of so_long.h ===

#ifndef SO_LONG_H
# define SO_LONG_H

//	Includes:
# include "../libft/inc/libftpp.h"
# include "../minilibx-linux/mlx.h"

//	Macros:
# define WIDTH 800
# define HEIGHT 600

//	Animation Macros:
# define IDLE_FRAMES 6

//	Data types:
typedef struct s_image
{
	void	*image;
}	t_image;

typedef struct s_data
{
	void	*mlx;
	void	*win;
	int		frame;
	int		frame_count;
	t_image	idle[IDLE_FRAMES];
}	t_data;

#endif
=== end of so_long.h ===
