=== start of assets_boot.c ===

#include "boot_lib.h"
#include "so_long.h"

static void	boot_map(t_assets *a, void *mlx, int *mask)
{
	int			i;
	char		path[23];

	i = 0;
	ft_bzero(path, 23);
	while (MAP_ASSETS[i])
	{
		ft_sprintf(path, 23, "./assets/map/%c.xpm", MAP_ASSETS[i]);
		a->a_map[i] = mlx_xpm_file_to_image(mlx, path, &a->w, &a->h);
		if (!a->a_map[i])
		{
			*mask |= MLXLOAD_ER;
			ft_printf("Failed to load %s\n", path);
			return ;
		}
		i++;
	}
}

static void	boot_error(t_assets *a, void *mlx, int *mask)
{
	int		i;
	t_img	img;

	img.img = mlx_new_image(mlx, TILE_SIZE, TILE_SIZE);
	if (!img.img)
	{
		*mask |= MLXLOAD_ER;
		return ;
	}
	img.data = (int *)mlx_get_data_addr(mlx, &img.bpp, &img.line, &img.endian);
	if (!img.data)
	{
		*mask |= MLXLOAD_ER;
		return ;
	}
	i = 0;
	while (i < TILE_SIZE * TILE_SIZE)
		img.data[i++] = 0xFF00FF;
	a->a_err = img.img;
}

void	ft_boot_assets(t_game *game)
{
	boot_map(game->assets, game->mlx, &game->error_bitmask);
	if (game->error_bitmask)
		return ;
	boot_error(game->assets, game->mlx, &game->error_bitmask);
	if (game->error_bitmask)
		return ;
	//TODO: load player and sprites assets
}
=== end of assets_boot.c ===
=== start of boot.c ===

#include "boot_lib.h"
#include "so_long.h"

static void	boot_t_game(t_game *game)
{
	game->error_bitmask = 0;
	game->move_count = 0;
	game->p_x = 0;
	game->p_y = 0;
	game->coins = 0;
	game->mlx = NULL;
	game->win = NULL;
	game->map = ft_calloc(1, sizeof(t_map));
	game->assets = ft_calloc(1, sizeof(t_assets));
	if (!game->map || !game->assets)
		game->error_bitmask |= MALLOCS_ER;
}

void	ft_boot_game(t_game *game, char *file)
{
	boot_t_game(game);
	if (game->error_bitmask)
		return ;
	game->assets->map_file = file;
	game->mlx = mlx_init();
	if (!game->mlx)
	{
		game->error_bitmask |= MLXLOAD_ER;
		return ;
	}
	ft_boot_map(game);
	if (game->error_bitmask)
		return ;
	ft_boot_mlx(game);
	if (game->error_bitmask)
		return ;
	ft_boot_assets(game);
}
=== end of boot.c ===
=== start of boot_lib.h ===

#ifndef BOOT_LIB_H
# define BOOT_LIB_H

# include "so_long.h"

int		ft_is_wall(t_map map, int y, int x);
char	ft_prep_wall(t_map map, int y, int x);
char	**ft_clean_arr(char **arr);
void	ft_clean_game(t_game *game);
void	ft_boot_map(t_game *game);
void	ft_boot_assets(t_game *game);
void	ft_boot_mlx(t_game *game);
void	ft_detail_map(t_map *map);


/* Macros: */
# define WASD_BITMASK "0123456789abcdef"
# define BITMASK_3 "0101010101010101"
# define BITMASK_6 "0011001100110011"
# define BITMASK_7 "3102310231023102"
# define BITMASK_9 "0000111100001111"
# define BITMASK_B "3131020231310202"
# define BITMASK_C "0000000011111111"
# define BITMASK_D "3333111100002222"
# define BITMASK_E "3311331100220022"
# define BITMASK_F "abcdefghijklmnop"

#endif
=== end of boot_lib.h ===
=== start of detail_map.c ===

#include "boot_lib.h"

int	ft_is_wall(t_map map, int y, int x)
{
	char	c;
	int		s_x;
	int		s_y;

	s_x = map.x;
	s_y = map.y;
	if (x < 0 || x >= s_x || y < 0 || y >= s_y)
		return (1);
	c = map.layout[y][x];
	return (c == '1');
}

static char latter_walls(int mask_dir, int mask_dig)
{
	if (mask_dir == 10)
		return ('Q');
	if (mask_dir == 11)
		return ("RTSU"[BITMASK_B[mask_dig] - '0']);
	if (mask_dir == 12)
		return ("VW"[BITMASK_C[mask_dig] - '0']);
	if (mask_dir == 13)
		return ("XYZ%"[BITMASK_D[mask_dig] - '0']);
	if (mask_dir == 14)
		return ("!@#$"[BITMASK_E[mask_dig] - '0']);
	if (mask_dir == 15)
		return (BITMASK_F[mask_dig]);
	return ('*');
}

static char	give_wall(int mask_dir, int mask_dig)
{
	if (mask_dir == 0)
		return ('A');
	if (mask_dir == 1)
		return ('B');
	if (mask_dir == 2)
		return ('C');
	if (mask_dir == 3)
		return ("DE"[BITMASK_3[mask_dig] - '0']);
	if (mask_dir == 4)
		return ('F');
	if (mask_dir == 5)
		return ('G');
	if (mask_dir == 6)
		return ("HI"[BITMASK_6[mask_dig] - '0']);
	if (mask_dir == 7)
		return ("JKLM"[BITMASK_7[mask_dig] - '0']);
	if (mask_dir == 8)
		return ('N');
	if (mask_dir == 9)
		return ("OP"[BITMASK_9[mask_dig] - '0']);
	return (latter_walls(mask_dir, mask_dig));
}

char	ft_prep_wall(t_map map, int y, int x)
{
	int	wasd_mask;
	int	diag_mask;

	wasd_mask = 0;
	wasd_mask |= ft_is_wall(map, y - 1, x + 0) << 3;
	wasd_mask |= ft_is_wall(map, y + 0, x - 1) << 2;
	wasd_mask |= ft_is_wall(map, y + 1, x + 0) << 1;
	wasd_mask |= ft_is_wall(map, y + 0, x + 1) << 0;
	diag_mask = 0;
	diag_mask |= ft_is_wall(map, y - 1, x - 1) << 3;
	diag_mask |= ft_is_wall(map, y - 1, x + 1) << 2;
	diag_mask |= ft_is_wall(map, y + 1, x - 1) << 1;
	diag_mask |= ft_is_wall(map, y + 1, x + 1) << 0;
	return (give_wall(wasd_mask, diag_mask));
}
=== end of detail_map.c ===
=== start of draw_lib.h ===

#ifndef DRAW_LIB_H
#define DRAW_LIB_H

# include "so_long.h"


#endif
=== end of draw_lib.h ===
=== start of file.c ===

#include "parse_lib.h"
#include <fcntl.h>
#include <unistd.h>

static char	**bad_array(char **arr, int fd)
{
	int	i;

	if (fd >= 0)
		close(fd);
	i = 0;
	if (arr)
	{
		while (arr[i])
		{
			free(arr[i]);
			i++;
		}
		free(arr);
	}
	return (NULL);
}

static int	map_row_size(char *file)
{
	int		fd;
	int		rows;
	char	buf;

	fd = open(file, O_RDONLY);
	if (fd < 0)
		return (-1);
	rows = 1;
	while (read(fd, &buf, 1) > 0)
	{
		if (buf == '\n')
			rows++;
	}
	close(fd);
	return (rows);
}

static char	**return_map(int fd, char **map, int size)
{
	int		i;
	char	*temp;

	temp = get_next_line(fd);
	i = 0;
	while (i < size && temp)
	{
		map[i] = ft_strtrim(temp, "\n");
		if (!map[i])
			return (bad_array(map, fd));
		if (temp)
			free(temp);
		temp = get_next_line(fd);
		i++;
	}
	close(fd);
	return (map);
}

static char	**load_map(char *file)
{
	int		fd;
	int		n;
	char	**map;

	n = map_row_size(file);
	if (n <= 0)
		return (NULL);
	map = ft_calloc(n, sizeof(char *));
	if (!map)
		return (NULL);
	fd = open(file, O_RDONLY);
	if (fd < 0)
		return (bad_array(map, fd));
	return (return_map(fd, map, n));
}

void	ft_file_check(t_validators *v)
{
	int	i;

	i = ft_strlen(v->map_file);
	if (i < 4)
		v->error_mask |= BERFILE_ER;
	else
	{
		if (ft_strncmp(v->map_file + (i - 4), ".ber", 4))
			v->error_mask |= BERFILE_ER;
	}
	if (!v->error_mask)
		v->arr = load_map(v->map_file);
	if (!v->arr)
		v->error_mask |= MAPFILE_ER;
}
=== end of file.c ===
=== start of flood.c ===

#include "parse_lib.h"
#include <stdlib.h>

static void	coin_flood(int y, int x, t_validators *v)
{
	if (x < 0 || y < 0 || x >= v->x || y >= v->y || v->coin_map[y][x] == '1' ||
	v->coin_map[y][x] == 'F' || v->coin_map[y][x] == 'E')
		return ;
	if (v->coin_map[y][x] == 'C')
		v->coins -= 1;
	v->coin_map[y][x] = 'F';
	coin_flood(y - 1, x, v);
	coin_flood(y, x - 1, v);
	coin_flood(y + 1, x, v);
	coin_flood(y, x + 1, v);
}

static int	exit_flood(int y, int x, t_validators *v)
{

	if (x < 0 || y < 0 || x >= v->x || y >= v->y
		|| v->exit_map[y][x] == '1' || v->exit_map[y][x] == 'F')
		return (0);
	if (v->exit_map[y][x] == 'E')
		return (1);
	v->exit_map[y][x] = 'F';
	return (exit_flood(y - 1, x, v) ||
	exit_flood(y, x + 1, v) ||
	exit_flood(y + 1, x, v) ||
	exit_flood(y, x - 1, v));
}

static char	**clean_arr(t_validators *v)
{
	int	i;

	if (v->coin_map)
	{
		i = -1;
		while (v->coin_map[++i])
			free(v->coin_map[i]);
		free(v->coin_map);
		v->coin_map = NULL;
	}
	if (v->exit_map)
	{
		i = -1;
		while (v->exit_map[++i])
			free(v->exit_map[i]);
		free(v->exit_map);
		v->exit_map = NULL;
	}
	v->error_mask |= MALLOCS_ER;
	return (NULL);
}

static char	**clone_arr(t_validators *v)
{
	int		i;
	char	**new_arr;

	new_arr = ft_calloc(v->y + 1, sizeof(char *));
	if (!new_arr)
		return (clean_arr(v));
	i = 0;
	while (v->arr[i])
	{
		new_arr[i] = ft_strdup(v->arr[i]);
		if (!new_arr[i])
			return (clean_arr(v));
		i++;
	}
	return (new_arr);
}

void	ft_flood_map(t_validators *v)
{
	v->coin_map = clone_arr(v);
	v->exit_map = clone_arr(v);
	if (!v->coin_map || !v->exit_map)
	{
		clean_arr(v);
		return ;
	}
	if (v->coin_map)
		coin_flood(v->p_y, v->p_x, v);
	if (v->exit_map)
		v->exit = exit_flood(v->p_y, v->p_x, v);
	if (v->coins)
		v->error_mask |= LOCKOIN_ER;
	if (!v->exit)
		v->error_mask |= LOCKEXI_ER;
}
=== end of flood.c ===
=== start of looper.c ===

#include "draw_lib.h"
#include "so_long.h"
#include <stdlib.h>

int	ft_on_expose(void *g)
{
	ft_draw_map((t_game *)g);
	return (0);
}

int	ft_on_destroy(void *g)
{
	(void)g;
	return (0);
}

void	ft_run_game(t_game *game)
{
	if (!game || !game->mlx || !game->win)
		return ;
	mlx_loop(game->mlx);
}
=== end of looper.c ===
=== start of maparse.c ===

#include "parse_lib.h"
#include "so_long.h"
#include <stddef.h>
#include <stdlib.h>

static void	free2d(char **arr)
{
	int	i;

	i = 0;
	while (arr[i])
	{
		free(arr[i]);
		i++;
	}
	free(arr);
}

static int	deboot_validators(t_validators *v)
{
	if (v->arr)
		free2d(v->arr);
	if (v->coin_map)
		free2d(v->coin_map);
	if (v->exit_map)
		free2d(v->exit_map);
	return (v->error_mask);
}

static t_validators	*boot_validators(char *file, t_validators *v)
{
	v->error_mask = 0;
	v->coins = 0;
	v->exit = 0;
	v->player = 0;
	v->x = 0;
	v->y = 0;
	v->flood = 0;
	v->arr = NULL;
	v->coin_map = NULL;
	v->exit_map = NULL;
	v->map_file = file;
	return (v);
}

int	ft_valid_map(char *map_file)
{
	t_validators	v;

	boot_validators(map_file, &v);
	ft_file_check(&v);
	if (v.error_mask)
		return (v.error_mask);
	ft_uniques(&v);
	if (v.error_mask)
		return (deboot_validators(&v));
	ft_check_ones(&v);
	ft_flood_map(&v);
	deboot_validators(&v);
	return (v.error_mask);
}

=== end of maparse.c ===
=== start of map_boot.c ===

#include "boot_lib.h"
#include "so_long.h"
#include <fcntl.h>
#include <unistd.h>

static int	row_count(char *file)
{
	int		fd;
	int		rows;
	char	buffer;

	fd = open(file, O_RDONLY);
	if (fd < 0)
		return (-1);
	rows = 1;
	while (read(fd, &buffer, 1) > 0)
	{
		if (buffer == '\n')
			rows++;
	}
	close(fd);
	return (rows);
}

static char	**copy_map(int fd, char **map, int size)
{
	int		i;
	char	*temp;

	temp = get_next_line(fd);
	i = 0;
	while (i < size && temp)
	{
		map[i] = ft_strtrim(temp, "\n");
		if (!map[i])
		{
			close(fd);
			return (ft_clean_arr(map));
		}
		free(temp);
		temp = get_next_line(fd);
		i++;
	}
	close(fd);
	return (map);
}

static char **load_map(char *file)
{
	int		fd;
	int		size;
	char	**map;

	size = row_count(file);
	if (size < 0)
		return (NULL);
	map = ft_calloc(size, sizeof(char *));
	fd = open(file, O_RDONLY);
	if (fd < 0)
		return (ft_clean_arr(map));
	return (copy_map(fd, map, size));
}

void	ft_boot_map(t_game *game)
{
	int	i;

	game->map->layout = load_map(game->assets->map_file);
	if (!game->map->layout)
		game->error_bitmask |= MALLOCS_ER;
	game->map->x = ft_strlen(game->map->layout[0]);
	i = 0;
	while (game->map->layout[i])
		i++;
	game->map->y = i;
	ft_detail_map(game->map);
	if (!game->map->arr)
		game->error_bitmask |= MALLOCS_ER;
}
=== end of map_boot.c ===
=== start of map_draw.c ===

#include "draw_lib.h"
#include "so_long.h"
#include <stdlib.h>

static void	*give_image_ptr(t_game *game, char c)
{
	int		i;
	t_assets *a;

	if (!game || !game->assets)
		return (NULL);
	i = 0;
	a = game->assets;
	while (MAP_ASSETS[i])
	{
		if (c == MAP_ASSETS[i])
			return (a->a_map[i]);
		i++;
	}
	return (a->a_err);
}


void	ft_draw_map(t_game *game)
{
	int		x;
	int		y;
	void	*img;
	t_map	*map;

	if (!game || !game->mlx || !game->win || !game->map)
		return ;
	map = game->map;
	y = 0;
	while (map->arr[y])
	{
		x = 0;
		while (map->arr[y][x])
		{
			img = give_image_ptr(game, map->arr[y][x]);
			ft_printf("(%d,%d) -> '%c'  ptr=%p\n", x, y, map->arr[y][x], img);
			if (!img)
				return ;
			mlx_put_image_to_window(game->mlx, game->win, img,
						   x * TILE_SIZE, y * TILE_SIZE);
			x++;
		}
		y++;
	}
}
=== end of map_draw.c ===
=== start of mlx_boot.c ===

#include "boot_lib.h"
#include "so_long.h"

void	ft_boot_mlx(t_game *game)
{
	int	width;
	int	height;

	width = game->map->x * TILE_SIZE;
	height = game->map->y * TILE_SIZE;
	game->win = mlx_new_window(game->mlx, width, height, GAME_NAME);
	if (!game->win)
    	{
    		game->error_bitmask |= MLXLOAD_ER;
			return ;
    	}
	mlx_expose_hook(game->win, ft_on_expose, game);
	mlx_hook(game->win, 17, 0, ft_on_destroy, game);
}
=== end of mlx_boot.c ===
=== start of ones.c ===

#include "parse_lib.h"
#include "so_long.h"

static int	top_and_bottom(t_validators *v)
{
	int	i;
	int	y;

	i = 0;
	y = v->y - 1;
	while (v->arr[0][i])
	{
		if (v->arr[0][i] != '1')
			return (0);
		i++;
	}
	i = 0;
	while (v->arr[y][i])
	{
		if (v->arr[y][i] != '1')
			return (0);
		i++;
	}
	return (1);
}

static int	sides(t_validators *v)
{
	int	i;
	int	y_lim;
	int	x_lim;

	y_lim = v->y - 1;
	x_lim = v->x - 1;
	i = 1;
	while (i < y_lim)
	{
		if (v->arr[i][0] != '1' || v->arr[i][x_lim] != '1')
			return (0);
		i++;
	}
	return (1);
}

void	ft_check_ones(t_validators *v)
{
	if (!top_and_bottom(v) || !sides(v))
		v->error_mask |= OPENWAL_ER;
}
=== end of ones.c ===
=== start of parse_lib.h ===

#ifndef PARSE_LIB_H
# define PARSE_LIB_H

/* Includes: */
# include <stdlib.h>
# include "so_long.h"

/* Types: */

typedef struct s_validators
{
	int				flood;
	int				x;
	int				y;
	int				p_x;
	int				p_y;
	char			*map_file;
	char			**arr;
	char			**coin_map;
	char			**exit_map;
	unsigned int	error_mask;
	unsigned int	player;
	unsigned int	exit;
	unsigned int	coins;
}	t_validators;

/* Macros: */

/* Functions: */
void	ft_uniques(t_validators *v);
void	ft_flood_map(t_validators *v);
void	ft_check_ones(t_validators *v);
void	ft_file_check(t_validators *v);

#endif
=== end of parse_lib.h ===
=== start of reboot_map.c ===

#include "boot_lib.h"

static void	clone_arr(t_map *map)
{
	int		i;
	char	**new_arr;

	new_arr = ft_calloc(map->y + 1, sizeof(char *));
	if (!new_arr)
		return ;
	i = 0;
	while (i < map->y)
	{
		new_arr[i] = ft_calloc(map->x + 1, sizeof(char));
		if (!new_arr[i])
		{
			ft_clean_arr(new_arr);
			return ;
		}
		i++;
	}
	map->arr = new_arr;
}

static char	prep_floor(t_map map, int y, int x)
{
	int			faux_random;
	static int	last_rand;

	faux_random = 0;
	if (x - 1 >= 0)
		faux_random += map.layout[y][x - 1];
	if (y - 1 >= 0)
		faux_random += map.layout[y - 1][x];
	if (x + 1 < map.x)
		faux_random += map.layout[y][x + 1];
	if (y + 1 < map.y)
		faux_random += map.layout[y + 1][x];
	faux_random %= 4;
	if (faux_random == last_rand)
		faux_random = (faux_random + 1) % 4;
	last_rand = faux_random;
	return ("wxyz"[faux_random]);
}

void	ft_detail_map(t_map *map)
{
	int	x;
	int	y;

	clone_arr(map);
	if (!map->arr)
		return ;
	y = 0;
	while (map->layout[y])
	{
		x = 0;
		while (map->layout[y][x])
		{
			if (ft_is_wall(*map, y, x))
				map->arr[y][x] = ft_prep_wall(*map, y, x);
			else
				map->arr[y][x] = prep_floor(*map, y, x);
			x++;
		}
		y++;
	}
}
=== end of reboot_map.c ===
=== start of so_long.c ===

#include "so_long.h"
#include <unistd.h>


int	main(int ac, char **av)
{
	int		invalid_run;
	t_game	game;
	if (ac != 2)
		return (ft_perror("%s", "Use: ./so_long MAP_FILE.ber\n"));
	invalid_run = ft_valid_map(av[1]);
	if (invalid_run)
		return (ft_perror("%s", "Parsing problem!\n"));
	ft_boot_game(&game, av[1]);
	if (game.error_bitmask)
		return (ft_perror("%s", "Boot problem!\n"));
	ft_run_game(&game);
}
=== end of so_long.c ===
=== start of so_long.h ===

#ifndef SO_LONG_H
# define SO_LONG_H

/* Global Includes: */
# include "../libft/inc/libftpp.h"
# include "../minilibx-linux/mlx.h"

/* Types: */

typedef struct s_map
{
	int		x;
	int		y;
	char	**arr;
	char	**layout;
}	t_map;

typedef struct s_img
{
	int		bpp;
	int		line;
	int		endian;
	int		width;
	int		height;
	int		*data;
	void	*img;
}	t_img;

typedef struct s_assets
{
	int		h;
	int		w;
	char	*map_file;
	void	*a_map[52];
	void	*a_err;
}	t_assets;

typedef struct s_game
{
	int			error_bitmask;
	int			move_count;
	int			p_x;
	int			p_y;
	int			coins;
	void		*mlx;
	void		*win;
	t_map		*map;
	t_assets	*assets;
}	t_game;

typedef enum e_flags
{	
	SUCCESSFUL = 0,
	MALLOCS_ER = 1 << 0,
	BERFILE_ER = 1 << 1,
	MAPFILE_ER = 1 << 2,
	X_VALUE_ER = 1 << 3,
	PLAYERS_ER = 1 << 4,
	EXITPLU_ER = 1 << 5,
	OPENWAL_ER = 1 << 6,
	NOCOINS_ER = 1 << 7,
	NOPLAYE_ER = 1 << 8,
	NOEXITS_ER = 1 << 9,
	LOCKOIN_ER = 1 << 10,
	LOCKEXI_ER = 1 << 11,
	WRONGAC_ER = 1 << 12,
	MLXLOAD_ER = 1 << 13
}	t_flags;

/* System Dependant Macros: */
# ifdef __linux__
#  define KEY_ESC	65307
#  define KEY_W		119
#  define KEY_A		97
#  define KEY_S		115
#  define KEY_D		100
#  define KEY_UP	65362
#  define KEY_LEFT	65361
#  define KEY_DOWN	65364
#  define KEY_RIGHT	65363
#  define LIN_FLAG	1

# elif __APPLE__
#  define KEY_ESC	53
#  define KEY_W		13
#  define KEY_A		0
#  define KEY_S		1
#  define KEY_D		2
#  define KEY_UP	126 
#  define KEY_LEFT	123 
#  define KEY_DOWN	125
#  define KEY_RIGHT	124 
#  define LIN_FLAG	0
# endif

/* Macros: */
# define GAME_NAME "so_long"
# define TILE_SIZE 48
# define MAP_ASSETS "!%@$aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPQRSTUvVwWxXyYzZ#"

/* Functions: */
int	ft_valid_map(char *map_file);

// Boot functions:
void	ft_boot_game(t_game *game, char *file);

// Exit functions:
void	ft_exit_game(t_game *game);

// Error management:
void	ft_resolve_error(int mask);

// Draw functions:
void	ft_run_game(t_game *game);
void	ft_draw_map(t_game *game);

// Loop functions:
int		ft_on_expose(void *g);
int		ft_on_destroy(void *g);
#endif
=== end of so_long.h ===
=== start of swiper.c ===

#include "boot_lib.h"
#include "so_long.h"
#include <stdlib.h>

char	**ft_clean_arr(char **arr)
{
	int	i;

	if (!arr || !*arr)
		return (NULL);
	i = 0;
	while (arr[i])
	{
		free(arr[i]);
		i++;
	}
	free(arr);
	return (NULL);
}

static void	deload_assets(t_assets *assets, void *mlx)
{
	int	i;

	if (!assets || !mlx)
		return ;
	i = -1;
	while (MAP_ASSETS[++i])
		mlx_destroy_image(mlx, assets->a_map[i]);
	mlx_destroy_image(mlx, assets->a_err);
}

void	ft_clean_game(t_game *game)
{
	if (game->map)
	{
		if (game->map->arr)
			ft_clean_arr(game->map->arr);
		if (game->map->layout)
			ft_clean_arr(game->map->layout);
		free(game->map);
	}
	if (game->assets)
	{
		deload_assets(game->assets, game->mlx);
		free(game->assets);
	}
	if (game->win)
		mlx_destroy_window(game->mlx, game->win);
	if (game->mlx)
	{
		mlx_destroy_display(game->mlx);
		free(game->mlx);
	}
}
=== end of swiper.c ===
=== start of uniques.c ===

#include "parse_lib.h"
#include "so_long.h"

static void	valid_e(t_validators *v)
{
	int	x;
	int	y;

	y = 0;
	while (v->arr[y])
	{
		x = 0;
		while (v->arr[y][x])
		{
			if (v->arr[y][x] == 'E' && !v->exit)
				v->exit = 1;
			else if (v->arr[y][x] == 'E')
				v->error_mask |= EXITPLU_ER;
			x++;
		}
		y++;
	}
	if (!v->exit)
		v->error_mask |= NOEXITS_ER;
}

static void	valid_p(t_validators *v)
{
	int	x;
	int	y;

	y = 0;
	while (v->arr[y])
	{
		x = 0;
		while (v->arr[y][x])
		{
			if (v->arr[y][x] == 'P' && !v->player)
			{
				v->player = 1;
				v->p_x = x;
				v->p_y = y;
			}
			else if (v->arr[y][x] == 'P')
				v->error_mask |= PLAYERS_ER;
			x++;
		}
		y++;
	}
	if (!v->player)
		v->error_mask |= NOPLAYE_ER;
}

static void	valid_c(t_validators *v)
{
	int	y;
	int	x;

	y = 0;
	while (v->arr[y])
	{
		x = 0;
		while (v->arr[y][x])
		{
			if (v->arr[y][x] == 'C')
				v->coins++;
			x++;
		}
		y++;
	}
	if (!v->coins)
		v->error_mask |= NOCOINS_ER;
}

static int	valid_x(t_validators *v)
{
	int		i;

	i = 0;
	v->x = ft_strlen(v->arr[0]);
	while (v->arr[i])
	{
		if ((int)ft_strlen(v->arr[i]) != v->x)
		{
			v->error_mask |= X_VALUE_ER;
			return (0);
		}
		i++;
	}
	v->y = i;
	return (1);
}

void	ft_uniques(t_validators *v)
{
	if (!valid_x(v))
		return ;
	valid_p(v);
	valid_e(v);
	valid_c(v);
}
=== end of uniques.c ===
