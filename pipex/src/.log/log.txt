=== start of error.c ===

#include "pipex.h"
#include <stddef.h>

void	ft_error_handler(int m)
{
	if (m == BAD_ARGS)
		ft_perror("Please use: ./pipex.c infile cmd1 cmd2 outfile\n");
	else if (m == BAD_PIPE)
		ft_perror("Piping error\n");
	else if (m == BAD_FORK)
		ft_perror("Fork error\n");
	else if (m == BAD_MALL)
		ft_perror("Malloc error\n");
	exit(1);
}

void	ft_clean_split(char **tab)
{
	size_t	i;

	i = 0;
	while (tab[i])
	{
		free(tab[i]);
		i++;
	}
	free(tab);
}

char	**ft_bad_split(char **to_clean)
{
	ft_clean_split(to_clean);
	ft_error_handler(BAD_MALL);
	return (NULL);
}
=== end of error.c ===
=== start of file_ctl.c ===

#include "pipex.h"
#include <stddef.h>
#include <unistd.h>
#include <fcntl.h>

static char	**get_paths(char *cmd, char **ep)
{
	char	*path;
	char	*temp;
	char	**split;
	size_t	i;

	i = 0;
	while (ep[i] && !ft_strnstr(ep[i], "PATH=", 5))
		i++;
	split = ft_split(&ep[i][5], ':');
	if (!split)
		return (ft_bad_split(split));
	i = -1;
	while (split[++i])
	{
		path = ft_strjoin("/", cmd);
		if (!path)
			return (ft_bad_split(split));
		temp = ft_strjoin(split[i], path);
		if (!temp)
			return (ft_bad_split(split));
		free(split[i]);
		split[i] = temp;
		free(path);
	}
	return (split);
}

static char *get_file_pwd(char *file, char **ep)
{
	size_t	i;
	char	*pwd;
	char	*file_path;

	i = 0;
	while (ep[i] && !(ft_strnstr(ep[i], "PWD=", 4)))
		i++;
	pwd = ft_strdup(&ep[i][4]);
	if (!pwd)
		return (NULL);
	file_path = NULL;
	file_path = ft_strjoin("/", file);
	if (!file_path)
	{
		free(pwd);
		return (NULL);
	}
	file_path = ft_strjoin(pwd, file_path);
	free(pwd);
	return (file_path);
}

char	*ft_get_bin(char *cmd, char **ep)
{
	char	*bin;
	char	**paths;
	size_t	i;

	paths = get_paths(cmd, ep);
	i = 0;
	while (paths[i] && access(paths[i], X_OK) != 0)
		i++;
	if (!paths[i])
	{
		ft_clean_split(paths);
		return (ft_strdup(cmd));
	}
	bin = ft_strdup(paths[i]);
	ft_clean_split(paths);
	return (bin);
}


static void	file_error(char *file, int type)
{
	if (type == EXIST_ERROR)
		ft_perror("pipex: no such file or directory:");
	else if (type == PERMS_ERROR)
		ft_perror("pipex: permission denied:");
	ft_perror(" %s\n", file);
	ft_error_handler(BAD_OPEN);
}

int	ft_fd_opener(char *file, int io, char **ep)
{
	int		fd;
	char	*path;

	fd = -1;
	path = get_file_pwd(file, ep);
	if (io == MODE_READ)
	{
		if (access(path, F_OK) != 0)
			file_error(file, EXIST_ERROR);
		if (access(path, R_OK) != 0)
			file_error(file, PERMS_ERROR);
		fd = open(path, READ_FLAGS);
	}
	else if (io == MODE_WRIT)
	{
		if (access(path, F_OK) == 0)
		{
			if (access(path, W_OK) != 0)
				file_error(file, PERMS_ERROR);
		}
		fd = open(path, WRIT_FLAGS);
	}
	free(path);
	return (fd);
}
=== end of file_ctl.c ===
=== start of memory_handle.c ===
#include "pipex.h"
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>

static void	run_exec(char *bin, char **av, char **ep)
{
	pid_t	pid;
	int		status;

	pid = fork();
	if (pid == 0)
	{
		if (execve(bin, av, ep) == -1)
		{
			ft_perror("pipex: command not found:");
			ft_perror(" %s\n", bin);
		}
		exit(1);
	}
	else
	{
		waitpid(pid, &status, 0);
		free(bin);
		ft_clean_split(av);
		exit(WEXITSTATUS(status));
	}
}

void	ft_exec_cmd(char *cmd, char **ep)
{
	char	**av;
	char	*bin;

	av = ft_split(cmd, ' ');
	if (!av)
		ft_error_handler(BAD_MALL);
	bin = ft_get_bin(av[0], ep);
	if (!bin)
	{
		ft_clean_split(av);
		ft_error_handler(BAD_MALL);
	}
	run_exec(bin, av, ep);
}
=== end of memory_handle.c ===
=== start of pipex.c ===

#include "pipex.h"
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

static void	run_child(char **av, int *pipe, char **ep)
{
	int	fd;

	fd = ft_fd_opener(av[0], MODE_READ, ep);
	if (fd < 0)
		ft_error_handler(BAD_OPEN);
	dup2(fd, 0);
	dup2(pipe[1], 1);
	close(pipe[0]);
	ft_exec_cmd(av[1], ep);
}

static void	run_parent(char **av, int *pipe, char **ep)
{
	int	fd;

	fd = ft_fd_opener(av[3], MODE_WRIT, ep);
	if (fd < 0)
		ft_error_handler(BAD_OPEN);
	dup2(fd, 1);
	dup2(pipe[0], 0);
	close(pipe[1]);
	ft_exec_cmd(av[2], ep);
}

int	main(int argc, char **argv, char **envp)
{
	int		pipe_fds[2];
	pid_t	pid;

	if (argc != 5)
		ft_error_handler(BAD_ARGS);
	if (pipe(pipe_fds) == -1)
		ft_error_handler(BAD_PIPE);
	pid = fork();
	if (pid == -1)
		ft_error_handler(BAD_FORK);
	if (pid == 0)
		run_child(argv + 1, pipe_fds, envp);
	else
	{
		run_parent(argv + 1, pipe_fds, envp);
		wait(NULL);
	}
}


=== end of pipex.c ===
=== start of pipex.h ===

#ifndef PIPEX_H
# define PIPEX_H

/*	Includes:	*/
# include "../libft/inc/libftpp.h"

/*	Macros:	*/
// Error handler macros:
# define BAD_ARGS 1
# define BAD_PIPE 2
# define BAD_FORK 3
# define BAD_MALL 4
# define BAD_OPEN 5
// Fd macros:
# define MODE_READ 1
# define MODE_WRIT 2
# define READ_FLAGS O_RDONLY, 0777
# define WRIT_FLAGS O_WRONLY | O_CREAT | O_TRUNC, 0777
# define EXIST_ERROR -1
# define PERMS_ERROR -2

/*	Functions:	*/
int		ft_fd_opener(char *file, int io, char **ep);
void	ft_error_handler(int m);
void	ft_clean_split(char **tab);
void	ft_exec_cmd(char *cmd, char **ep);
char	*ft_get_bin(char *cmd, char **ep);
char	**ft_bad_split(char **to_clean);
#endif
=== end of pipex.h ===
=== start of test.c ===
#include <stdio.h>

int main() {
    char myChar = 'A';
    printf("\x1b[31m%c\x1b[0m\n", myChar); // Red text
    printf("\x1b[42m%c\x1b[0m\n", myChar); // Green background
    printf("\x1b[33m%c\x1b[0m\n", myChar); // Yellow text
    return 0;
}
=== end of test.c ===
